import React from 'react';
import Head from 'next/head';
import styles from './index.module.scss';
import pageConfig from '../magnolia.config';
import { EditablePage } from '@magnolia/react-editor';
import { useEffect, useState } from 'react';
import AppContext from '../utils/hooks/context';
import {
  buildMagnoliaDataPath,
  getAcceptLang,
  getCleanCurrentPathParts,
  getMagnoliaData,
  useMagnoliaData,
} from '../utils/magnolia-data-requests';
import {
  GetStaticProps,
  GetStaticPropsContext,
  GetStaticPropsResult,
} from 'next';
import normalizeSluck from '../utils/normalize-sluck';

interface PageProps {
  host: string;
  secret: string;
  authorPathPart: string;
  pageJson: unknown;
  templateDefinitions: unknown;
  preview: boolean;
  apiBase: string;
  pageJsonPath: string;
  pageTemplateDefinitionsPath: string | undefined;
  currentPathname: string;
  languages: string[];
  registerPreview: boolean;
  fetchInterval: number;
}

export default function Page(props: PageProps) {
  const {
    host,
    currentPathname,
    preview,
    secret,
    authorPathPart,
    languages,
    registerPreview,
    fetchInterval,
  } = props;
  const environmentPathName =
    typeof window !== 'undefined' && window.location
      ? window.location.pathname
      : currentPathname;
  const { pathname, language } = getCleanCurrentPathParts(
    environmentPathName,
    authorPathPart,
    languages
  );

  const { data, error } = useMagnoliaData<PageProps>({
    host,
    language,
    registerPreview,
    preview,
    secret,
    pathname,
    props,
    fetchInterval,
  });

  const [state, setState] = useState({
    ...props,
    pageConfig,
  });

  useEffect(() => {
    setState({
      ...data,
      pageConfig,
    });
  }, [data]);

  if (error) {
    console.log('Error for path', pathname, preview, `${host}/api/${pathname}`);
    console.log(error);
    return <pre>error {JSON.stringify(error, null, 4)}</pre>;
  }

  return (
    <AppContext.Provider value={[state, setState]}>
      <div className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        {state.preview && state.pageJson && (
          <EditablePage
            content={state.pageJson}
            config={state.pageConfig}
            templateDefinitions={state.templateDefinitions}
          />
        )}
      </div>
    </AppContext.Provider>
  );
}
export const getStaticProps: GetStaticProps<PageProps> = async ({
  preview,
  params,
}: GetStaticPropsContext): Promise<GetStaticPropsResult<PageProps>> => {
  const {
    NEXTJS_HOST,
    NEXTJS_PUBLIC_FETCH_INTERVAL,
    MGNL_PATH_AUTHOR,
    MGNL_LANGUAGES,
    MGNL_PREVIEW_EXPORT,
    MGNL_PREVIEW_SECRET,
  } = process.env;

  preview = Boolean(preview);
  const registerPreview = Boolean(!preview && MGNL_PREVIEW_EXPORT);

  const languages =
    MGNL_LANGUAGES && MGNL_LANGUAGES.split(' ').length
      ? MGNL_LANGUAGES.split(' ')
      : ['en'];

  const slug = normalizeSluck(params);

  const {
    apiBase,
    currentPathname,
    language,
    pageJsonPath,
    pageTemplateDefinitionsPath,
  } = buildMagnoliaDataPath(slug, registerPreview, languages);

  const { pageJson = null, templateDefinitions = null } = await getMagnoliaData(
    {
      apiBase,
      pageJsonPath,
      pageTemplateDefinitionsPath,
      acceptLanguage: getAcceptLang(language),
    }
  );

  const fetchInterval = parseInt(NEXTJS_PUBLIC_FETCH_INTERVAL || '0', 10);

  return {
    props: {
      host: String(NEXTJS_HOST),
      authorPathPart: String(MGNL_PATH_AUTHOR),
      secret: String(MGNL_PREVIEW_SECRET),
      pageJson,
      templateDefinitions,
      preview,
      apiBase,
      pageJsonPath,
      pageTemplateDefinitionsPath,
      currentPathname,
      languages,
      registerPreview,
      fetchInterval: preview || registerPreview ? 0 : fetchInterval,
    },
    revalidate: fetchInterval / 1000,
  };
};
