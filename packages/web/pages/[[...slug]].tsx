import React from 'react';
import Head from 'next/head';
import styles from './index.module.scss';
import pageConfig from '../magnolia.config';
import { EditablePage } from '@magnolia/react-editor';
import { useEffect, useState } from 'react';
import AppContext from '../utils/hooks/context';
import {
  buildMagnoliaDataPath,
  getAcceptLang,
  getCleanCurrentPathParts,
  getMagnoliaData,
} from '../utils/magnolia-data-requests';
import useSWR from 'swr';

export async function fetcher<JSON = any>(
  input: RequestInfo,
  init?: RequestInit
): Promise<JSON> {
  const res = await fetch(input, init);
  return res.json();
}

export default function Slug(props: any) {
  const {
    host,
    currentPathname,
    preview,
    previewFetchInterval,
    fetchInterval,
    authorPathPart,
    languages,
  } = props;
  const environmentPathName =
    typeof window !== 'undefined' && window.location
      ? window.location.pathname
      : currentPathname;
  const { pathname, language } = getCleanCurrentPathParts(
    environmentPathName,
    authorPathPart,
    languages
  );
  console.log(
    'useSWR for path',
    pathname,
    preview,
    language,
    `${host}/api/${pathname}`
  );
  const { data, error } = useSWR(
    `${host}/api/${pathname}`,
    (input: RequestInfo) =>
      fetcher(input, {
        headers: {
          'Accept-Language': getAcceptLang(language),
        },
      }),
    {
      fallbackData: props,
      refreshInterval: preview ? previewFetchInterval : fetchInterval,
    }
  );
  const [state, setState] = useState({
    ...props,
    pageConfig,
  });

  useEffect(() => {
    setState({
      ...data,
      pageConfig,
    });
  }, [data]);

  if (error) {
    console.log('Error for path', pathname, preview, `${host}/api/${pathname}`);
    console.log(error);
    return <pre>error {JSON.stringify(error, null, 4)}</pre>;
  }

  return (
    <AppContext.Provider value={[state, setState]}>
      <div className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        {state.preview && state.pageJson && (
          <EditablePage
            content={state.pageJson}
            config={state.pageConfig}
            templateDefinitions={state.templateDefinitions}
          />
        )}
      </div>
    </AppContext.Provider>
  );
}

export async function getStaticProps({
  preview = process.env.MGNL_PREVIEW,
  params,
}: any) {
  const {
    NEXTJS_HOST,
    NEXTJS_PUBLIC_FETCH_INTERVAL,
    NEXTJS_PREVIEW_FETCH_INTERVAL,
    MGNL_PATH_AUTHOR,
    MGNL_LANGUAGES,
  } = process.env;

  const languages =
    MGNL_LANGUAGES && MGNL_LANGUAGES.split(' ').length
      ? MGNL_LANGUAGES.split(' ')
      : ['en'];

  const {
    apiBase,
    currentPathname,
    language,
    pageJsonPath,
    pageTemplateDefinitionsPath,
  } = buildMagnoliaDataPath(
    params && params.slug ? params.slug : null,
    preview,
    languages
  );

  console.log(
    'getStaticProps',
    params && params.slug ? params.slug : null,
    preview,
    apiBase,
    pageJsonPath,
    pageTemplateDefinitionsPath
  );

  const { pageJson, templateDefinitions } = await getMagnoliaData({
    apiBase,
    pageJsonPath,
    pageTemplateDefinitionsPath,
    acceptLanguage: getAcceptLang(language),
  });

  const fetchInterval = parseInt(NEXTJS_PUBLIC_FETCH_INTERVAL || '0', 10);
  const previewFetchInterval = parseInt(
    NEXTJS_PREVIEW_FETCH_INTERVAL || '0',
    10
  );

  return {
    props: {
      host: NEXTJS_HOST,
      authorPathPart: MGNL_PATH_AUTHOR,
      pageJson,
      templateDefinitions,
      preview,
      apiBase,
      pageJsonPath,
      pageTemplateDefinitionsPath,
      currentPathname,
      languages,
      previewFetchInterval,
      fetchInterval,
    },
    revalidate: preview
      ? previewFetchInterval / 1000 || false
      : fetchInterval / 1000 || false,
  };
}

export async function getStaticPaths({ locales, defaultLocale }: any) {
  console.log('getStaticPaths locales, defaultLocale', locales, defaultLocale);

  return { paths: ['preview'], fallback: 'blocking' };
}
