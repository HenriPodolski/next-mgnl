import React from 'react';
import Head from 'next/head';
import styles from '../index.module.scss';
import pageConfig from '../../magnolia.config';
import { EditablePage } from '@magnolia/react-editor';
import { useEffect, useState } from 'react';
import AppContext from '../../utils/hooks/context';
import {
  buildMagnoliaDataPath,
  getAcceptLang,
  getCleanCurrentPathParts,
} from '../../utils/magnolia-data-requests';
import useSWR from 'swr';
import {
  GetStaticProps,
  GetStaticPropsContext,
  GetStaticPropsResult,
} from 'next';
import { fetcher } from '../../utils/fetcher';
import normalizeSluck from '../../utils/normalize-sluck';

interface SlugProps {
  host: string;
  authorPathPart: string;
  pageJson: unknown;
  templateDefinitions: unknown;
  preview: boolean;
  apiBase: string;
  pageJsonPath: string;
  pageTemplateDefinitionsPath: string | undefined;
  currentPathname: string;
  languages: string[];
  fetchInterval: number;
  registerPreview: boolean;
}

function usePreview(host: string, registerPreview: boolean) {
  return useSWR<{ success: boolean }>(
    () => (registerPreview ? `${host}/api/preview` : null),
    fetcher
  );
}

function useMagnoliaData({
  host,
  pathname,
  registerPreview,
  language,
  fetchInterval,
  props,
}: {
  host: string;
  pathname: string;
  authorPathPart: string;
  preview: boolean;
  registerPreview: boolean;
  language: string;
  fetchInterval: number;
  props: SlugProps;
}) {
  const { error } = usePreview(host, registerPreview);

  if (error) {
    throw error;
  }

  return useSWR(
    `${host}/api/${pathname}`,
    (input: RequestInfo) =>
      fetcher(input, {
        headers: {
          'Accept-Language': getAcceptLang(language),
        },
        credentials: 'include',
      }),
    {
      fallbackData: props,
      refreshInterval: fetchInterval,
    }
  );
}

export default function Slug(props: SlugProps) {
  const {
    host,
    currentPathname,
    preview,
    fetchInterval,
    authorPathPart,
    languages,
    registerPreview,
  } = props;
  const environmentPathName =
    typeof window !== 'undefined' && window.location
      ? window.location.pathname
      : currentPathname;
  const { pathname, language } = getCleanCurrentPathParts(
    environmentPathName,
    authorPathPart,
    languages
  );
  console.log(
    'useSWR for path',
    pathname,
    preview,
    language,
    `${host}/api/${pathname}`
  );
  const { data, error } = useMagnoliaData({
    host,
    pathname,
    authorPathPart,
    preview,
    fetchInterval,
    language,
    registerPreview,
    props,
  });
  const [state, setState] = useState({
    ...props,
    pageConfig,
  });

  useEffect(() => {
    setState({
      ...data,
      pageConfig,
    });
  }, [data]);

  if (error) {
    console.log('Error for path', pathname, preview, `${host}/api/${pathname}`);
    console.log(error);
    return <pre>error {JSON.stringify(error, null, 4)}</pre>;
  }

  return (
    <AppContext.Provider value={[state, setState]}>
      <div className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        {state.preview && state.pageJson && (
          <EditablePage
            content={state.pageJson}
            config={state.pageConfig}
            templateDefinitions={state.templateDefinitions}
          />
        )}
      </div>
    </AppContext.Provider>
  );
}
export const getStaticProps: GetStaticProps<SlugProps> = async ({
  preview,
  params,
}: GetStaticPropsContext): Promise<GetStaticPropsResult<SlugProps>> => {
  const {
    NEXTJS_HOST,
    NEXTJS_PUBLIC_FETCH_INTERVAL,
    MGNL_PATH_AUTHOR,
    MGNL_LANGUAGES,
    MGNL_PREVIEW_EXPORT,
  } = process.env;

  preview = Boolean(preview);
  let registerPreview = false;

  if (!preview && MGNL_PREVIEW_EXPORT) {
    registerPreview = true;
  }

  const languages =
    MGNL_LANGUAGES && MGNL_LANGUAGES.split(' ').length
      ? MGNL_LANGUAGES.split(' ')
      : ['en'];

  const slug = normalizeSluck(params);

  const {
    apiBase,
    currentPathname,
    pageJsonPath,
    pageTemplateDefinitionsPath,
  } = buildMagnoliaDataPath(slug, registerPreview, languages);

  console.log(
    'getStaticProps template',
    process.env.NODE_ENV,
    params,
    params && params.slug ? params.slug : null,
    preview,
    registerPreview,
    apiBase,
    pageJsonPath,
    pageTemplateDefinitionsPath
  );

  const fetchInterval = parseInt(NEXTJS_PUBLIC_FETCH_INTERVAL || '0', 10);

  return {
    props: {
      host: NEXTJS_HOST as string,
      authorPathPart: MGNL_PATH_AUTHOR as string,
      pageJson: null,
      templateDefinitions: null,
      preview,
      apiBase,
      pageJsonPath,
      pageTemplateDefinitionsPath,
      currentPathname,
      languages,
      registerPreview,
      fetchInterval: preview ? 0 : fetchInterval,
    },
    revalidate: fetchInterval / 1000,
  };
};
